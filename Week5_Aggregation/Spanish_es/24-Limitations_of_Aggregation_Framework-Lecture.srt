1
00:00:00,000 --> 00:00:00,160

2
00:00:00,160 --> 00:00:02,170
El Aggregation Framework
es bastante útil, pero

3
00:00:02,170 --> 00:00:03,669
tiene sus limitaciones.

4
00:00:03,669 --> 00:00:06,370
Quiero hablar de ellas para

5
00:00:06,370 --> 00:00:07,830
que sepas cuáles son.

6
00:00:07,830 --> 00:00:11,620
La primera es que el conjunto
de resultados está limitado

7
00:00:11,620 --> 00:00:15,400
a 16MB de memoria porque, como
sabes, se retorna en un

8
00:00:15,400 --> 00:00:16,250
solo documento

9
00:00:16,250 --> 00:00:19,360
y un documento en MongoDB
está limitado a 16MB

10
00:00:19,360 --> 00:00:20,940
de memoria.

11
00:00:20,940 --> 00:00:22,280
Es bastante grande,

12
00:00:22,280 --> 00:00:24,080
pero para una colección
muy grande puede ser

13
00:00:24,080 --> 00:00:26,120
una limitación, si es
que vas a atravesar

14
00:00:26,120 --> 00:00:27,450
la colección entera.

15
00:00:27,450 --> 00:00:30,870
Otra limitación es que no
puedes usar más del 10% de

16
00:00:30,870 --> 00:00:32,040
la memoria de una máquina.

17
00:00:32,040 --> 00:00:33,920
Eso es un montón de memoria,

18
00:00:33,920 --> 00:00:37,730
pero estas agregaciones pueden ser
bastante complicadas, especialmente

19
00:00:37,730 --> 00:00:39,710
si están atravesando
una colección entera.

20
00:00:39,710 --> 00:00:42,500
Puedes reducir el tamaño de
tus agregaciones haciendo

21
00:00:42,500 --> 00:00:45,540
"$match" iniciales para ir 
filtrando, si es que no tienes

22
00:00:45,540 --> 00:00:47,500
que hacer cálculos sobre
todos los documentos.

23
00:00:47,500 --> 00:00:50,960
También puedes usar
"$project" para filtrar

24
00:00:50,960 --> 00:00:53,360
los campos que no
estés utilizando--

25
00:00:53,360 --> 00:00:54,760
procesando así menos datos.

26
00:00:54,760 --> 00:00:57,640
Pero éstas son dos cosas
que debes considerar.

27
00:00:57,640 --> 00:01:02,080
La última es cómo funciona
en un ambiente con

28
00:01:02,080 --> 00:01:03,080
"shards".

29
00:01:03,080 --> 00:01:05,690
Veamos un ambiente con "shards".

30
00:01:05,690 --> 00:01:09,240
En un ambiente con "shards",
si te acuerdas, típicamente

31
00:01:09,240 --> 00:01:10,710
tienes tu colección.

32
00:01:10,710 --> 00:01:11,650
No vamos a abordar esto

33
00:01:11,650 --> 00:01:13,900
extensamente en esta clase.

34
00:01:13,900 --> 00:01:17,280
Las colecciones las tendrías divididas
a través de varias instancias de Mongo

35
00:01:17,280 --> 00:01:19,300
y éstas usualmente son
conjuntos de réplicas.

36
00:01:19,300 --> 00:01:22,590
Así que podrían haber tres
servidores aquí y tres

37
00:01:22,590 --> 00:01:26,170
aquí y tres más aquí, todos
manejando la misma parte

38
00:01:26,170 --> 00:01:27,480
de la colección.

39
00:01:27,480 --> 00:01:29,960
Y en lugar de enviar tu
consulta directo a un

40
00:01:29,960 --> 00:01:31,610
proceso mongod--

41
00:01:31,610 --> 00:01:34,500
todos éstos tienen procesos
mongod ejecutándose--

42
00:01:34,500 --> 00:01:37,720
la mandas a un proceso mongos.

43
00:01:37,720 --> 00:01:38,600
Es un router.

44
00:01:38,600 --> 00:01:41,050
Tu aplicación está aquí.

45
00:01:41,050 --> 00:01:45,660
Y habla con el mongos, el cual
luego habla con los mongod.

46
00:01:45,660 --> 00:01:47,750
Cada uno de éstos es un "shard".

47
00:01:47,750 --> 00:01:51,240
Así que las agregaciones sí
funcionan en un ambiente con

48
00:01:51,240 --> 00:01:56,570
"shards", pero después del primer
"$group" o la primera fase de "$sort",

49
00:01:56,570 --> 00:01:58,930
la agregación tiene que
retornar al mongos.

50
00:01:58,930 --> 00:02:02,990
Entonces el primer grupo en
"$sort" puede ser dividido y

51
00:02:02,990 --> 00:02:03,835
ejecutarse aquí--

52
00:02:03,835 --> 00:02:06,060
bueno, si vas a ejecutar una
consulta de agregación sobre

53
00:02:06,060 --> 00:02:08,730
la colección entera, el mongos va a
enviar el "$group" y el "$sort" a

54
00:02:08,730 --> 00:02:09,870
todos los "shards" y
los va a ejecutar.

55
00:02:09,870 --> 00:02:12,270
Pero después del primer "$group"
y "$sort", tienen que ser agrupados

56
00:02:12,270 --> 00:02:14,480
acá en el mongos, para
el resultado final

57
00:02:14,480 --> 00:02:17,030
antes de ser enviados a la
siguiente etapa del "pipeline".

58
00:02:17,030 --> 00:02:18,530
Porque la siguiente etapa del
"pipeline" necesita ver el

59
00:02:18,530 --> 00:02:19,530
resultado final.

60
00:02:19,530 --> 00:02:22,900
Así que como resultado, si
tienes un "pipeline" muy largo

61
00:02:22,900 --> 00:02:24,850
fácilmente puedes terminar
haciendo que tu cálculo

62
00:02:24,850 --> 00:02:26,460
corra en tu mongos.

63
00:02:26,460 --> 00:02:29,250
En términos de ingeniería
de aplicaciones, usualmente

64
00:02:29,250 --> 00:02:32,290
el proceso mongos corre en
la misma computadora que tu

65
00:02:32,290 --> 00:02:32,960
aplicación.

66
00:02:32,960 --> 00:02:35,980
Mientras tu aplicación se
ejecuta, le pones un pequeño

67
00:02:35,980 --> 00:02:37,270
mongos en la misma máquina.

68
00:02:37,270 --> 00:02:39,540
Y esa máquina puede tener
un tamaño diferente al de

69
00:02:39,540 --> 00:02:40,550
la base de datos.

70
00:02:40,550 --> 00:02:41,690
Puede que sea más pequeña.

71
00:02:41,690 --> 00:02:44,090
Y esta agregación
podría ser gigantesca.

72
00:02:44,090 --> 00:02:46,960
Así que ten en mente que
cuando estás en un ambiente

73
00:02:46,960 --> 00:02:49,970
con "shards" y estás haciendo
agregaciones, es probable

74
00:02:49,970 --> 00:02:51,210
que tus cálculos
estén ocurriendo

75
00:02:51,210 --> 00:02:52,310
en tu router mongos.

76
00:02:52,310 --> 00:02:53,970
Y esto puede afectar
el rendimiento de

77
00:02:53,970 --> 00:02:56,250
tu aplicación si el
mongos está en la misma

78
00:02:56,250 --> 00:02:57,130
máquina que tu aplicación.

79
00:02:57,130 --> 00:02:58,730
Es algo que está más allá de
la envergadura de este curso,

80
00:02:58,730 --> 00:03:01,750
pero quería mencionarlo
porque sé que algunos

81
00:03:01,750 --> 00:03:04,190
de ustedes probablemente
trabajan en grandes

82
00:03:04,190 --> 00:03:05,850
sistemas de producción.

83
00:03:05,850 --> 00:03:07,580
Vamos a hablar un poco más
sobre las implicaciones

84
00:03:07,580 --> 00:03:10,460
de "sharding" y réplicas
y otros aspectos de la

85
00:03:10,460 --> 00:03:13,850
arquitectura de sistemas 
la próxima semana.

86
00:03:13,850 --> 00:03:15,230
Ahora, hay otras alternativas
al Aggregation Framework

87
00:03:15,230 --> 00:03:18,470
si es que no quieres
usarlo o no puedes

88
00:03:18,470 --> 00:03:20,350
debido a sus limitaciones.

89
00:03:20,350 --> 00:03:21,920
Puedes usar MapReduce.

90
00:03:21,920 --> 00:03:23,710
Hay una versión que
viene con Mongo.

91
00:03:23,710 --> 00:03:26,220
Y no hemos hablado de
ello en este curso,

92
00:03:26,220 --> 00:03:27,660
pero podrías usarlo.

93
00:03:27,660 --> 00:03:29,762
Podrías también usar Hadoop.

94
00:03:29,762 --> 00:03:31,800
Y el framework de Hadoop
es básicamente una

95
00:03:31,800 --> 00:03:33,610
implementación de MapReduce.

96
00:03:33,610 --> 00:03:35,500
Si quieres hacer eso, hay
un conector para Hadoop

97
00:03:35,500 --> 00:03:39,460
que conecta a Hadoop con MongoDB.

98
00:03:39,460 --> 00:03:42,400
Ésas son otras opciones
si es que no puedes usar

99
00:03:42,400 --> 00:03:44,660
el Aggregation Framework
para un consulta en particular.

100
00:03:44,660 --> 00:03:45,100
Bueno.

101
00:03:45,100 --> 00:03:46,350
Eso es todo.