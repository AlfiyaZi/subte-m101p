1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:03,590
One of the reasons why linking
and embedding work so well

3
00:00:03,590 --> 00:00:06,380
within mongoDB is
because mongoDB

4
00:00:06,380 --> 00:00:09,090
supports multikey indexes.

5
00:00:09,090 --> 00:00:12,100
I want to talk a little bit
about multikey indexes and why

6
00:00:12,100 --> 00:00:15,060
they're useful within
mongoDB schema.

7
00:00:15,060 --> 00:00:18,380
So, earlier we talked about
a students and teachers

8
00:00:18,380 --> 00:00:20,820
arrangement, where there's a
many to many relationship

9
00:00:20,820 --> 00:00:22,330
between students and teachers.

10
00:00:22,330 --> 00:00:24,540
Where a student has multiple
teachers and a teacher has

11
00:00:24,540 --> 00:00:25,770
multiple students.

12
00:00:25,770 --> 00:00:28,870
And, one of the ways we talked
about modeling it was having a

13
00:00:28,870 --> 00:00:31,400
students collection where we
have an underscore ID for each

14
00:00:31,400 --> 00:00:33,860
student and a name
for each student.

15
00:00:33,860 --> 00:00:36,390
And a teachers collection where
we have an underscore ID

16
00:00:36,390 --> 00:00:38,320
for each teacher and a name
for each teacher.

17
00:00:38,320 --> 00:00:41,820
And then we link these two
across by having a teachers

18
00:00:41,820 --> 00:00:44,560
array in the students
collection, right here,

19
00:00:44,560 --> 00:00:46,590
there's teachers array.

20
00:00:46,590 --> 00:00:49,730
And in this teachers array, we
list out an array of all of

21
00:00:49,730 --> 00:00:52,640
the underscore IDs representing
the teachers that

22
00:00:52,640 --> 00:00:53,470
the student has.

23
00:00:53,470 --> 00:00:56,320
Now there are two obvious types
of queries you might

24
00:00:56,320 --> 00:00:58,160
want to ask of these
collections.

25
00:00:58,160 --> 00:01:01,675
And one is, tell me all
of the teachers for

26
00:01:01,675 --> 00:01:02,445
a particular student.

27
00:01:02,445 --> 00:01:04,129
Now that's pretty
straightforward.

28
00:01:04,129 --> 00:01:07,820
I would just do a DB.find into
the students collection.

29
00:01:07,820 --> 00:01:09,980
And I would pull out the
teachers array and then I

30
00:01:09,980 --> 00:01:13,730
would have this array in my hand
of all of these teachers.

31
00:01:13,730 --> 00:01:17,540
But it's a little bit less clear
how you would find all

32
00:01:17,540 --> 00:01:19,670
the students that have
a particular teacher.

33
00:01:19,670 --> 00:01:22,060
How would you find all of
the students that have a

34
00:01:22,060 --> 00:01:23,650
particular teacher?

35
00:01:23,650 --> 00:01:26,520
So the way you would do that
is you would search in the

36
00:01:26,520 --> 00:01:30,210
students collection, using one
of our set operators, to find

37
00:01:30,210 --> 00:01:34,260
all of the documents where,
let's say, this value and this

38
00:01:34,260 --> 00:01:35,850
value appeared.

39
00:01:35,850 --> 00:01:37,850
But you want that to be fast.

40
00:01:37,850 --> 00:01:39,560
And in order for that to
be fast, there has to

41
00:01:39,560 --> 00:01:41,300
be an index on that.

42
00:01:41,300 --> 00:01:43,460
Now, we didn't talk much
about indexes.

43
00:01:43,460 --> 00:01:45,520
And we're going to talk more
about performance in a future

44
00:01:45,520 --> 00:01:50,760
unit, but it turns out that
mongo supports adding a index

45
00:01:50,760 --> 00:01:52,900
on the teachers key.

46
00:01:52,900 --> 00:01:55,800
And when you index something
that's an array, what you get

47
00:01:55,800 --> 00:02:00,470
is a multikey index where mongo
actually indexes all of

48
00:02:00,470 --> 00:02:03,920
the values in the array
for all the documents.

49
00:02:03,920 --> 00:02:07,490
So I want to show you how that
looks in the mongo shell.

50
00:02:07,490 --> 00:02:10,100
And show you the database in
action when it queries

51
00:02:10,100 --> 00:02:12,570
something that has
a multikey in it.

52
00:02:12,570 --> 00:02:14,290
So, I'm in the mongo
shell right now.

53
00:02:14,290 --> 00:02:20,430
And I'm going to use the
school collection.

54
00:02:20,430 --> 00:02:22,310
I've set up two collections.

55
00:02:22,310 --> 00:02:24,420
I've set up a students
collection and a teachers

56
00:02:24,420 --> 00:02:25,020
collection.

57
00:02:25,020 --> 00:02:27,990
And they look pretty similar to
what I just showed you on

58
00:02:27,990 --> 00:02:28,920
the white board.

59
00:02:28,920 --> 00:02:31,980
So in the students collection,
we've got four students,

60
00:02:31,980 --> 00:02:33,930
Andrew, Richard, Elliot,
and Mark.

61
00:02:33,930 --> 00:02:36,710
And they have a teachers array
indicating which teachers that

62
00:02:36,710 --> 00:02:38,050
each of them has.

63
00:02:38,050 --> 00:02:41,340
And in the teachers collection,
I've got the names

64
00:02:41,340 --> 00:02:43,540
of four teachers-- these are
actually Stanford professors

65
00:02:43,540 --> 00:02:45,010
that were there when
I was there--

66
00:02:45,010 --> 00:02:47,940
and you can see which teachers
each of these students has.

67
00:02:47,940 --> 00:02:50,830
If I would like to index and
create a multikey index on the

68
00:02:50,830 --> 00:02:54,080
teachers array, I can do that
through this command,

69
00:02:54,080 --> 00:02:58,395
db.students.ensureIndex
specifying teachers.

70
00:02:58,395 --> 00:03:00,360
And we're going to get indexes
later, but I just want to show

71
00:03:00,360 --> 00:03:01,882
you this one.

72
00:03:01,882 --> 00:03:05,470
And once I do that,
I can query and

73
00:03:05,470 --> 00:03:07,190
have it hit the index.

74
00:03:07,190 --> 00:03:11,780
So here's a query where I'm
asking the students collection

75
00:03:11,780 --> 00:03:16,080
to find me all the student
documents where the teachers

76
00:03:16,080 --> 00:03:20,620
array has both values one and
three in it, which means I'm

77
00:03:20,620 --> 00:03:24,385
looking for people who had
John Hennessy and James

78
00:03:24,385 --> 00:03:28,240
Plummer as teachers, and
return those documents.

79
00:03:28,240 --> 00:03:31,370
If I do that, you can see, I
find out that Richard and

80
00:03:31,370 --> 00:03:35,550
Elliot both had teachers one
and three, which is John

81
00:03:35,550 --> 00:03:38,750
Hennessy and James Plummer.

82
00:03:38,750 --> 00:03:40,930
Now, did that use an index?

83
00:03:40,930 --> 00:03:45,010
We could find that out by
calling .explain at

84
00:03:45,010 --> 00:03:47,790
the end of the query.

85
00:03:47,790 --> 00:03:49,950
We haven't shown that, but
we'll show it in a future

86
00:03:49,950 --> 00:03:52,780
unit. .explain shows
you the query plan.

87
00:03:52,780 --> 00:03:55,460
And you can see right at
the top, it says cursor

88
00:03:55,460 --> 00:04:00,030
BtreeCursor teachers_1 that
means that mongoDB did in fact

89
00:04:00,030 --> 00:04:02,280
use an index to perform
this query.

90
00:04:02,280 --> 00:04:05,490
And the existence of these
multikey indexes is one of the

91
00:04:05,490 --> 00:04:07,510
reasons why embedding
and linking

92
00:04:07,510 --> 00:04:09,980
works so well in mongoDB.

93
00:04:09,980 --> 00:04:12,230
Because you can still do the
types of queries you might

94
00:04:12,230 --> 00:04:15,260
expect to do in a relational
database and do them fast.

95
00:04:15,260 --> 00:04:16,588