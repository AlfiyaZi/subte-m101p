1
00:00:00,000 --> 00:00:00,200

2
00:00:00,200 --> 00:00:02,680
Cuando estás diseñando tus índices,
quieres que sean tan

3
00:00:02,680 --> 00:00:04,740
selectivos como sea posible.

4
00:00:04,740 --> 00:00:07,360
Y éste es un concepto que en realidad
no es diferente al del

5
00:00:07,360 --> 00:00:08,640
mundo relacional.

6
00:00:08,640 --> 00:00:10,840
Pero cuando estás eligiendo un
índice compuesto, si no

7
00:00:10,840 --> 00:00:13,170
seleccionas algo que sea
selectivo, entonces no hay 

8
00:00:13,170 --> 00:00:15,980
muchos valores para especificar
ese campo.

9
00:00:15,980 --> 00:00:17,690
Aquí tenemos un ejemplo.

10
00:00:17,690 --> 00:00:20,100
Digamos que estabas haciendo algún
registro de logs y que hubiera sólo

11
00:00:20,100 --> 00:00:23,872
tres tipos diferentes
de operaciones de registro.

12
00:00:23,872 --> 00:00:30,180
Había un "save", había
un "open" y un "run" --

13
00:00:30,180 --> 00:00:33,750
sólo estoy imaginando operaciones 
de registro que pudieras ver --

14
00:00:33,750 --> 00:00:35,740
un "put" y un "get".

15
00:00:35,740 --> 00:00:37,820
Y tenemos cientos de millones
de estas operaciones

16
00:00:37,820 --> 00:00:38,760
de registro.

17
00:00:38,760 --> 00:00:43,610
Y cada una de ellas tiene una fecha y
hora, o digamos un sello de tiempo.

18
00:00:43,610 --> 00:00:48,950
Por lo que, ¿tendrías un
índice que fuera el "timestamp,

19
00:00:48,950 --> 00:00:54,570
opcode", donce éstos
son los "opcodes", o tendría

20
00:00:54,570 --> 00:00:59,850
sentido hacer "opcode,
timestamp"?

21
00:00:59,850 --> 00:01:02,660
Ahora, la respuesta es que 
tendría mucho más sentido

22
00:01:02,660 --> 00:01:04,160
poner el "timestamp" primero.

23
00:01:04,160 --> 00:01:07,230
Y la razón es que si
normalmente conoces el rango de

24
00:01:07,230 --> 00:01:11,290
tiempo en el que estás buscando una
operación y especificas

25
00:01:11,290 --> 00:01:13,180
un "opcode", bien, hay sólo
cinco de estos "opcodes".

26
00:01:13,180 --> 00:01:15,890
Y así, especificando
uno estás eliminando

27
00:01:15,890 --> 00:01:17,960
sólo 4/5 de los datos.

28
00:01:17,960 --> 00:01:19,570
Hay una enorme cantidad
de datos que

29
00:01:19,570 --> 00:01:21,470
todavía se necesitan recorrer.

30
00:01:21,470 --> 00:01:23,750
Y si sólo tuvieras un índice
sobre "opcode", por ejemplo,

31
00:01:23,750 --> 00:01:26,300
no sería muy diferente
que hacer un

32
00:01:26,300 --> 00:01:28,190
escaneo de la colección completa.

33
00:01:28,190 --> 00:01:31,290
Mientras que, si hubiera un índice
sobre "timestamp, opcode", y

34
00:01:31,290 --> 00:01:35,340
conocieras las horas 
deseadas para consultar el

35
00:01:35,340 --> 00:01:39,190
"opcode", el intervalo de tiempo, entonces
sería bastante rápido.

36
00:01:39,190 --> 00:01:41,330
Porque sería un porcentaje
muy pequeño

37
00:01:41,330 --> 00:01:43,100
del registro total.

38
00:01:43,100 --> 00:01:48,360
Y tras eso, una vez que lo
reduces en un 99%, entonces

39
00:01:48,360 --> 00:01:50,300
buscar el "opcode" sería
eficiente y no

40
00:01:50,300 --> 00:01:51,690
habría
muchas operaciones

41
00:01:51,690 --> 00:01:53,380
en ese intervalo de tiempo.

42
00:01:53,380 --> 00:01:57,430
Esta idea de intentar elegir
n índice con selectividad es

43
00:01:57,430 --> 00:01:59,650
universalmente cierta en las bases de datos,
es cierta en bases de datos

44
00:01:59,650 --> 00:02:01,900
relacionales, y es
cierta en MongoDB.

45
00:02:01,900 --> 00:02:03,830
Así que simplemente ten eso en mente cuando
estés creando tus índices,

46
00:02:03,830 --> 00:02:07,030
que te gustaría que fueran
muy selectivos si pueden.

47
00:02:07,030 --> 00:02:09,720
En caso contrario, no hay
valores suficientes para tenerlos.

48
00:02:09,720 --> 00:02:13,400
Si sólo quieres buscar sobre
"opcode", bueno, entonces

49
00:02:13,400 --> 00:02:15,460
bien, pero va a ser
casi todos los datos por cada

50
00:02:15,460 --> 00:02:17,190
"time" individual que estás examinando.

51
00:02:17,190 --> 00:02:19,220
De acuerdo, hora de hacer un cuestionario.

52
00:02:19,220 --> 00:02:21,360
Dados los siguientes atributos
de automóviles --

53
00:02:21,360 --> 00:02:24,850
"color", "weight", "manufacture" y
"odometer_mileage", ¿qué

54
00:02:24,850 --> 00:02:27,950
índice es probablemente el más
selectivo, sabiendo que puedes

55
00:02:27,950 --> 00:02:29,840
pasar los cuatro atributos
en una búsqueda?

56
00:02:29,840 --> 00:02:32,200
Así que, ¿cuál de éstos va a
ser el más selectivo para

57
00:02:32,200 --> 00:02:34,160
reducir el número
de automóviles?

58
00:02:34,160 --> 00:02:35,410